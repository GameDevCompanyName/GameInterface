package ru.gdcn.beastmaster64revelations.GameInterface.Items;

public interface GameItem {

//    /** Конструктор предмета. Задаёт объекту все необходимые свойства.
//     * Если предмет только что был создан, он не имеет контейнера. **/
//    public GameItem(
//            String name,
//            ItemRarity rarity,
//            Integer weight,
//            Integer baseCost,
//            Boolean isUsable,
//            Boolean isDisposable,
//            Boolean isDropable,
//            Boolean isSellable,
//            Boolean isSoulbound
//            );

    /**
     * Возвращает полное название предмета - то, которое будет
     * отображаться в интвентаре, у торговца, "на полу" и тому подобное.
     **/
    public String getName();

    /**
     * Возвращает редкость предмета (ItemRarity). От неё зависит цвет
     * отображения в инвентаре, у торговца, на полу (в любом ItemContainer'е).
     * В зависимости от редкости могут совершаться какие-то действия
     * (например, эффект Воодушевления).
     **/
    public ItemRarity getRarity();

    /**
     * Возвращает целочисленный вес предмета.
     **/
    public Integer getWeight();

    /**
     * Возвращает базовую стоимость предмета. В дальнейшем она может
     * умножаться, в завивсимости от торговца и прочих факторов.
     **/
    public Integer getBaseCost();

    /**
     * Возвращает логическую переменную, обозначающую возможность
     * использовать предмет.
     **/
    public Boolean isUsable();

    /**
     * Возвращает логическую переменную, обозначающую исчезнет ли предмет
     * после использования.
     **/
    public Boolean isDisposable();

    /**
     * Возвращает логическую перменную, обозначающую может ли данный
     * предмет дробнуться с монстра. (Этот метод понадобится в случае,
     * если предметы для генерации дропа и для генерации товаров у торговца
     * будут браться из одного списка или вроде того)
     **/
    public Boolean isDropable();

    /**
     * Возвращает логическую переменную, обозначающую может и данный
     * предмет быть проданным/купленным.
     **/
    public Boolean isSellable();

    /**
     * Возвращает логическую переменную, обозначающую пропадёт ли
     * предмет у игрока, если он умрёт. Наиболее актуально для подземелий,
     * так как Soulbound-предметы никогда не будут потеряны игроком
     * без его желания.
     **/
    public Boolean isSoulbound();

    /**
     * Возвращает логическую переменную, обозначающую можно ли
     * переместить предмет из контейнера.
     **/
    public Boolean isTransferable();

    /**
     * Возвращает ссылку на контейнер, в котором в данный момент находится
     * предмет.
     **/
    public ItemContainer getContainer();

    /**
     * Распыление (удаление) объекта. Например, после смерти или использования.
     **/
    public void dispose();

    /**
     * Данный метод отвечает за логику перемещения предмета в другой контейнер, т.е.
     * данный метод должен проверить хватает ли в новом контейнере места под данный
     * предмет. Если хватает, он удаляет себя из старого контейнера и перемещается в
     * новый.
     * <p>
     * Возвращает:
     * True  - Если в новом контейнере хватило места и трансфер удался.
     * False - Если в новом контейнере не хватило места либо трансфер не удался
     * по другим причинам
     **/
    public Boolean transfer(ItemContainer newContainer);

}
